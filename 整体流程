import numpy as np
import pandas as pd

dimmasterhotel_detail = pd.read_csv(r"D:\xx\dimmasterhotel.csv")
dimmasterhotel_detail.info(verbose=True,null_counts= True) # verbose是否输出全部的概要,null_counts是否输出非空计数

datasets01 = pd.read_csv(r'D:\xx\datasets02.csv') 
datasets01.info()

datasets02 = datasets01.drop(columns=["xx","xx"])

corr_matrix = datasets02.corr(method='spearman')
corr_matrix["xx"].sort_values(ascending=False) # 输出xx属性和其他属性的相关性

b=["xx"] # 要删除的列

datasets03 = datasets02.drop(columns=["xx"])
datasets03.info()

def split_train_test(data, test_ratio):
    np.random.seed(42) #保证每次随机都是同一个seed，保证随机结果一致，数据集变动会导致数据随机结果变动
    shuffled_indices = np.random.permutation(len(data))
    test_set_size = int(len(data) * test_ratio)
    test_indices = shuffled_indices[:test_set_size]
    train_indices = shuffled_indices[test_set_size:]
    return data.iloc[train_indices], data.iloc[test_indices] 
datasets03_train,datasets03_test = split_train_test(datasets03,0.2)

datasets_train_prepared = datasets03_train.drop(columns="xx") # xx为目标值
datasets_train_labels = datasets03_train["xx"]
datasets_test_prepared = datasets03_test.drop(columns="xx")
datasets_test_labels = datasets03_test["xx"]

from sklearn.linear_model import LinearRegression # 线性回归模型
from sklearn.tree import DecisionTreeRegressor # 决策树回归模型
from sklearn.linear_model import LogisticRegression # 逻辑回归模型
from sklearn.ensemble import RandomForestRegressor  # 随机森林回归模型

# 线性回归模型
lin_reg = LinearRegression()
lin_reg.fit(datasets_train_prepared, datasets_train_labels) # 训练模型
lin_predictions = lin_reg.predict(datasets_test_prepared) # 训练后的模型进行数据预测

# 决策树回归模型
tree_reg = DecisionTreeRegressor()
tree_reg.fit(datasets_train_prepared, datasets_train_labels) # 训练模型
tree_predictions = tree_reg.predict(datasets_test_prepared) # 训练后的模型进行数据预测

# 随机森林回归模型
rf_reg = DecisionTreeRegressor()
rf_reg.fit(datasets_train_prepared, datasets_train_labels) # 训练模型
rf_predictions = rf_reg.predict(datasets_test_prepared) # 训练后的模型进行数据预测

from sklearn.metrics import r2_score
r2_score(datasets_test_labels,rf_predictions)
r2_score(datasets_test_labels,tree_predictions)
r2_score(datasets_test_labels,lin_predictions)

from sklearn.metrics import mean_squared_error
mse_test=mean_squared_error(datasets_test_labels,lin_predictions)
rmse_test=mse_test ** 0.5
print(rmse_test)

mse_test=mean_squared_error(datasets_test_labels,tree_predictions)
rmse_test=mse_test ** 0.5
print(rmse_test)

mse_test=mean_squared_error(datasets_test_labels,rf_predictions)
rmse_test=mse_test ** 0.5
print(rmse_test)
